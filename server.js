const WebSocket = require("ws");
const http = require("http");
const fs = require("fs");
const path = require("path");
const sqlite3 = require("sqlite3").verbose();

const server = http.createServer((req, res) => {
  res.writeHead(200, { "Content-Type": "text/plain" });
  res.end("WebSocket server is running.");
});

const wss = new WebSocket.Server({ server });

const imageFolder = path.join(__dirname, "random_images");

function getRandomImage() {
  const images = fs.readdirSync(imageFolder);
  const randomIndex = Math.floor(Math.random() * images.length);
  const imagePath = path.join(imageFolder, images[randomIndex]);
  const imageBuffer = fs.readFileSync(imagePath);
  return imageBuffer.toString("base64");
}

function saveImageToDisk(username, imageData) {
  const imageName = `${username}-${Date.now()}.jpg`;
  const imagePath = path.join("uploads", imageName);

  const imageBuffer = Buffer.from(
    imageData.replace(/^data:image\/\w+;base64,/, ""),
    "base64"
  );

  fs.writeFileSync(imagePath, imageBuffer, { encoding: "binary" });

  return imagePath;
}

wss.on("connection", (ws) => {
  ws.on("message", (data) => {
    try {
      const message = JSON.parse(data);

      if (message.getOldPosts) {
        // Récupérer les anciens messages/posts depuis la base de données
        const db = new sqlite3.Database("database.sqlite");
        const selectQuery = "SELECT * FROM images";

        db.all(selectQuery, (err, rows) => {
          if (err) {
            console.error("Error selecting data:", err);
          } else {
            ws.send(JSON.stringify(rows));
          }
        });

        db.close();
      } else if (message.deletePost) {
        // Supprimer un post spécifique de la base de données
        const db = new sqlite3.Database("database.sqlite");
        const deleteQuery = "DELETE FROM images WHERE id = ?";

        db.run(deleteQuery, [message.deletePost], (err) => {
          if (err) {
            console.error("Error deleting post:", err);
          } else {
            console.log("Post deleted.");

            // Diffuser la suppression à tous les clients connectés
            wss.clients.forEach((client) => {
              if (client.readyState === WebSocket.OPEN) {
                client.send(
                  JSON.stringify({ deletedPost: message.deletePost })
                );
              }
            });
          }
        });

        db.close();
      } else if (message.autoGeneratePosts) {
        const numPosts = message.numPosts || 5; // Number of posts to generate
        const db = new sqlite3.Database("database.sqlite");
        const insertQuery =
          "INSERT INTO images (username, description, image_path) VALUES (?, ?, ?)";

        for (let i = 0; i < numPosts; i++) {
          const username = "AutoGeneratedUser";
          const description = "Auto-generated post";
          const image = getRandomImage();
          const imagePath = saveImageToDisk(username, image);

          db.run(insertQuery, [username, description, imagePath], (err) => {
            if (err) {
              console.error("Error inserting data into database:", err);
            } else {
              console.log("Auto-generated post saved to database.");

              // Diffuser le message à tous les clients connectés
              wss.clients.forEach((client) => {
                if (client.readyState === WebSocket.OPEN) {
                  client.send(
                    JSON.stringify({ username, description, image: imagePath })
                  );
                }
              });
            }
          });
        }

        db.close();
      } else {
        const { username, description, image } = message;
        const imagePath = saveImageToDisk(username, image);

        const db = new sqlite3.Database("database.sqlite");
        const insertQuery =
          "INSERT INTO images (username, description, image_path) VALUES (?, ?, ?)";

        db.run(insertQuery, [username, description, imagePath], (err) => {
          if (err) {
            console.error("Error inserting data into database:", err);
          } else {
            console.log("Image data saved to database.");

            // Diffuser le message à tous les clients connectés
            wss.clients.forEach((client) => {
              if (client.readyState === WebSocket.OPEN) {
                client.send(
                  JSON.stringify({ username, description, image: imagePath })
                );
              }
            });
          }
        });
        db.close();
      }
    } catch (error) {
      console.error("Error processing message:", error);
    }
  });
});

server.listen(3000, () => {
  console.log("WebSocket server is listening on port 3000");
});
